:host {
  --grid-bg: #1e1e1e;
  --item-bg: #2b2b2b;
  --item-bg-hover: #353535;
  --item-border: rgba(255, 255, 255, 0.1);
  --item-border-hover: rgba(255, 255, 255, 0.2);
  --accent-color: #007acc;
  --accent-bg: rgba(0, 122, 204, 0.1);
  --error-color: red;
  --border-radius: 4px;
}

@grid-pattern: {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(to right, transparent calc(100% - 1px), var(--item-border) calc(100% - 1px)) 0 0 / var(--col-width) 100%,
  linear-gradient(to bottom, transparent calc(100% - 1px), var(--item-border) calc(100% - 1px)) 0 0 / 100% var(--row-height);
  pointer-events: none;
};

.grid-container {
  position: relative;
  width: 100%;
  min-height: 500px;
  height: 100%;
  background: var(--grid-bg);
  display: grid;
  grid-template-columns: repeat(10, var(--col-width));
  grid-template-rows: repeat(10, var(--row-height));

  &.show-grid::before {
    @grid-pattern();
    z-index: 2;
  }

  &.cdk-drop-list-dragging {
    .grid-item:not(.cdk-drag-dragging) {
      transition: transform 0ms;
    }

    &::before {
      @grid-pattern();
      z-index: 1;
    }
  }

  // Nested grid styling
  &.nested-grid {
    background: rgba(255, 255, 255, 0.03);
    border: 1px dashed rgba(255, 255, 255, 0.1);
    border-radius: 4px;

    .grid-item {
      background: var(--item-bg);
      border-color: rgba(255, 255, 255, 0.15);

      &:hover {
        background: var(--item-bg-hover);
        border-color: rgba(255, 255, 255, 0.3);
      }
    }
  }
}

.grid-item {
  position: relative;
  background: var(--item-bg);
  border-radius: var(--border-radius);
  border: 1px solid var(--item-border);
  min-width: 0;
  min-height: 0;
  transition: none;
  overflow: auto;

  &:hover {
    background: var(--item-bg-hover);
    border-color: var(--item-border-hover);
  }

  &.cdk-drag-preview {
    background: #3c3c3c;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    border: 2px solid var(--accent-color);
    opacity: 0.9;
    pointer-events: none;

    &::after {
      content: '';
      position: absolute;
      inset: 0;
      border: 2px dashed var(--accent-color);
      border-radius: var(--border-radius);
      animation: dash 1s linear infinite;
    }
  }

  &.cdk-drag-placeholder {
    background: var(--accent-bg);
    border: 2px dashed var(--accent-color);
    opacity: 1;
    pointer-events: none;
    animation: pulse 1.5s infinite ease-in-out;
  }

  &.cdk-drop-list-dragging::before {
    content: '';
    position: absolute;
    inset: -2px;
    border: 2px dashed var(--accent-color);
    border-radius: 6px;
    pointer-events: none;
  }

  &.colliding {
    border: 2px solid var(--error-color);
    cursor: not-allowed !important;
  }
}

@keyframes pulse {
  0% {
    opacity: 0.6;
    transform: scale(1);
  }
  50% {
    opacity: 0.3;
    transform: scale(1.02);
  }
  100% {
    opacity: 0.6;
    transform: scale(1);
  }
}

@keyframes dash {
  to {
    stroke-dashoffset: -10;
  }
}

.resize-handle {
  position: absolute;
  right: 4px;
  bottom: 4px;
  width: 16px;
  height: 16px;
  background: rgba(0, 0, 0, 0.05);
  border: 1.5px solid #bbb;
  border-radius: var(--border-radius);
  cursor: nwse-resize;
  z-index: 2;
  transition: background 0.2s, border-color 0.2s;

  &:hover {
    background: #e0e0e0;
    border-color: #888;
  }

  &::after {
    content: '';
    position: absolute;
    right: 2px;
    bottom: 2px;
    width: 10px;
    height: 10px;
    border-right: 2px solid #888;
    border-bottom: 2px solid #888;
    border-radius: 0 0 3px 0;
  }
}

.drag-handle {
  position: absolute;
  top: 0;
  left: 0;
  padding: 4px;
  margin: -4px;
  border-radius: var(--border-radius);
  cursor: move;
  opacity: 0.5;
  transition: opacity 0.2s;

  &:hover {
    opacity: 1;
    background: var(--item-border-hover);
  }

  svg {
    width: 16px;
    height: 16px;
    fill: currentColor;
  }
}

// extra styles for items
.item-content {
  height: 100%;
  color: white;
  display: flex;
  flex-direction: column;
  position: relative;
  overflow: hidden;
}

.item-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 8px;
  font-size: 14px;
  font-weight: 500;
  flex-shrink: 0;
}

// Nested grid wrapper
.nested-grid-wrapper {
  flex: 1;
  position: relative;
  overflow: hidden;
  min-height: 200px;
  min-width: 0;
  background: rgba(0, 0, 0, 0.2);
  border-radius: 4px;
  margin-top: 4px;

  // Nested grid should fill its container
  app-drag-item {
    display: block;
    height: 100%;
    width: 100%;
  }

  // Nested grid container adjustments
  .grid-container {
    min-height: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.05);
  }
}

// Parent items with children need special handling
.grid-item.has-children {
  overflow: visible;

  .item-content {
    overflow: hidden;
  }

  // Prevent nested items from being dragged outside
  .nested-grid-wrapper {
    .grid-item {
      // Nested items are contained within wrapper
      &.cdk-drag-dragging {
        z-index: 1;
      }
    }
  }
}
